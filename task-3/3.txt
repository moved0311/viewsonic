3. How to optimize this snippet?

[使用情境1]: 每次執行function1 request要把前一次的function1 request中斷。

可以不用寫function2，直接在function1中處理中斷，可將全域變數移動到function內部宣告。

```js
import { call, put } from "redux-saga/effects";
import { CANCEL } from "@redux-saga/symbols";

function* function1(action) {
  const ctrl = new AbortController();
  const config = {
    method: "POST",
    url: "https://some-endpoint-url.com",
    data: action.payload,
    signal: ctrl.signal,
  };

  try {
    const promise = yield call(/** a axios request with config */);
    promise[CANCEL] = () => ctrl.abort();

    yield put(/** reducer 1 */);
  } catch (e) {
    if (e.response) {
      const er = e.response;

      yield put(/** reducer 2 */);

      return;
    }
  } finally {
    if (ctrl.signal.aborted) {
      yield put(/** reducer 3 */);
    }
  }
}
```

參考: 
* https://www.youtube.com/watch?v=3jII8aMHHEc
* https://github.com/redux-saga/redux-saga/issues/1917


[使用情境2]: 要使用另外一個function2來中斷function1

`ctrl = new AbortController()` 搬到使用function1呼叫的地方，透過props方式傳遞crtl。
可以避免使用全域變數做宣告。
中斷時透過function2來中斷，需要傳與function1同一個ctrl來中斷。

```js
import { call, put } from "redux-saga/effects";

function* function1(action, ctrl) {
    const config = {
        method: "POST",
        url: "https://some-endpoint-url.com",
        data: action.payload,
        signal: ctrl.signal,
    };

    try {
        const { data } = yield call(/** a axios request with config */);

        yield put(/** reducer 1 */);
    } catch (e) {
        if (e.response) {
            const er = e.response;

            yield put(/** reducer 2 */);

            return;
        }
    } finally {
        if (ctrl.signal.aborted) {
            yield put(/** reducer 3 */);
        }
    }
}

function function2(ctrl) {
    ctrl.abort();
}
```

